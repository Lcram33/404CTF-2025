# ==== BEGIN CONTEXT HEADER ====
# The following file contains a part of the solution to the challenge. (2/2)
# SPOLIER ALERT : Stop here if you want to solve the challenge yourself.
# ==== END CONTEXT HEADER ====


import socket
import json


# Constants
SERVER_ADDR = "localhost" # TEST
# SERVER_ADDR = "challenges.404ctf.fr" # PROD
SERVER_PORT = 30269

DEBUG = False
MSG_SIZE = 1024

# Main program
def client():
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client.connect((SERVER_ADDR, SERVER_PORT))

    info_msg = client.recv(MSG_SIZE)
    if not info_msg:
        return
    if DEBUG: print("Received:" + info_msg.decode())


    # Step 1 - Get encrypted flag
    answer = "2" # see solution.py
    answer += '\n'
    client.send(answer.encode("utf-8")[:MSG_SIZE])
    if DEBUG: print(f"Sent: {answer}")

    msg = client.recv(2 * MSG_SIZE)
    if not msg:
        return
    if DEBUG: print("Received:" + msg.decode())

    enc_flag = msg.decode().split('intercept√© : ')[1].split('\n')[0].strip()
    n1, c1, n2, c2 = [int(x, 16) for x in enc_flag.split('-')]


    # Step 2 - Get three prime numbers generated by the LCG
    primes = list()
    for _ in range(3):
        answer = "1"
        answer += '\n'
        client.send(answer.encode("utf-8")[:MSG_SIZE])
        if DEBUG: print(f"Sent: {answer}")

        msg = client.recv(MSG_SIZE)
        if not msg:
            return
        if DEBUG: print("Received:" + msg.decode())

        prime = int(msg.decode().split(':')[1].split('\n')[0].strip())
        primes.append(prime)
    

    # Close the connection
    client.close()
    print("Connection to server closed")
    
    p1 = primes[0]
    p2 = primes[1]
    p3 = primes[2]
    
    json_data = json.dumps({
        "n1": n1,
        "c1": c1,
        "n2": n2,
        "c2": c2,
        "p1": p1,
        "p2": p2,
        "p3": p3
    }, indent=4, ensure_ascii=False, sort_keys=True)
    with open("data.json", "w", encoding="utf-8") as f:
        f.write(json_data)
    
    print(f"Dumped : {json_data}")


if __name__ == "__main__":
    client()